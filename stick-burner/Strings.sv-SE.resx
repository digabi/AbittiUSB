<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Burned" xml:space="preserve">
    <value>skrivet</value>
  </data>
  <data name="BurnExamStick" xml:space="preserve">
    <value>Skriv till serverstickor</value>
  </data>
  <data name="BurnStudentStick" xml:space="preserve">
    <value>Skriv till studerandens stickor</value>
  </data>
  <data name="ByteSuffix" xml:space="preserve">
    <value>B</value>
  </data>
  <data name="CleanDiskFirst" xml:space="preserve">
    <value> {0} Töm först stickan.</value>
  </data>
  <data name="DiskImageFolder" xml:space="preserve">
    <value>Katalog för skivavbilder</value>
  </data>
  <data name="DiskImageFolderBrowse" xml:space="preserve">
    <value>Bläddra...</value>
  </data>
  <data name="DiskImageFolderReset" xml:space="preserve">
    <value>Återställ standardkatalog</value>
  </data>
  <data name="DownloadNewVersionExam" xml:space="preserve">
    <value>Ladda den nyaste versionen</value>
  </data>
  <data name="DownloadNewVersionServer" xml:space="preserve">
    <value>Ladda den nyaste versionen</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value />
  </data>
  <data name="EvaluateTimeLeft" xml:space="preserve">
    <value>Uppskattar den kvarstående tiden...</value>
  </data>
  <data name="FormatStick" xml:space="preserve">
    <value>Töm utvalda</value>
  </data>
  <data name="Formatting" xml:space="preserve">
    <value> Tömmer...</value>
  </data>
  <data name="HeaderForDownloadExam" xml:space="preserve">
    <value>Studerandens sticka</value>
  </data>
  <data name="HeaderForDownloadServer" xml:space="preserve">
    <value>Serversticka</value>
  </data>
  <data name="ImageFileInfo" xml:space="preserve">
    <value>Stickan skapad {1} ({0}).</value>
  </data>
  <data name="ImageUpToDate" xml:space="preserve">
    <value>Stickan är uppdaterad</value>
  </data>
  <data name="InsufficientDiskSpace" xml:space="preserve">
    <value>AbittiUSB behöver minst 8 GB utrymme för att ladda och dekomprimera skivavbilder. Det finns {0} fritt utrymme, fria upp mera utrymme.</value>
  </data>
  <data name="NetworkUnavailable" xml:space="preserve">
    <value>AbittiUSB kräver en nätförbindelse: kolla, att det finns en nätförbindelse och starta om AbittiUSB.</value>
  </data>
  <data name="NewVersionLoading" xml:space="preserve">
    <value>En ny version laddas</value>
  </data>
  <data name="NumberOfSelectedSticks" xml:space="preserve">
    <value>({0}/{1} stickor utvalda)</value>
  </data>
  <data name="RecheckDiskSpace" xml:space="preserve">
    <value>Kolla på nytt.</value>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>Välj alla:</value>
  </data>
  <data name="SelectSticks" xml:space="preserve">
    <value>Välj stickor för behandling</value>
  </data>
  <data name="SettingsCancel" xml:space="preserve">
    <value>Avbryt</value>
  </data>
  <data name="SettingsSave" xml:space="preserve">
    <value>Spara inställningar</value>
  </data>
  <data name="SettingsTitle" xml:space="preserve">
    <value>Inställningar</value>
  </data>
  <data name="TimeLeft" xml:space="preserve">
    <value>Uppskattad kvarstående laddningstid {0}.</value>
  </data>
  <data name="UnexpectedError" xml:space="preserve">
    <value>Ett oväntat fel uppstod i AbittiUSB. Felrapporten har skickats, vid behov kontakta Abitti-stödteamet.</value>
  </data>
  <data name="Verified" xml:space="preserve">
    <value>kontrollerat</value>
  </data>
  <data name="VerifyServerBurn" xml:space="preserve">
    <value>Kontrollera serverstickorna</value>
  </data>
  <data name="VerifyStudentBurn" xml:space="preserve">
    <value>Kontrollera studerandenas stickor</value>
  </data>
  <data name="VerifyZipImage" xml:space="preserve">
    <value>Filen laddad, kollar filen...</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value>AbittiUSB ({0})</value>
  </data>
  <data name="ZipFileVerificationFailed" xml:space="preserve">
    <value>Ett fel upptäcktes i filen, ladda på nytt.</value>
  </data>
</root>